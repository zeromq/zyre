.#  codec_java.gsl
.#
.#  Generates a codec for a protocol specification
.#
.include "library.gsl"
.resolve_includes ()
.global.ClassName = java_class_name($(class.name)) 
.echo "Generating ../Java/src/main/java/org/zyre/$(ClassName).java..."
.output "../Java/src/main/java/org/zyre/$(ClassName).java"
/*  =========================================================================
    $(ClassName).java
    
    Generated codec class for $(ClassName)
    -------------------------------------------------------------------------
    $(string.trim (class->license.):block                                   )
    =========================================================================
*/

/*  These are the $(class.name) messages
.for message
.   message.name = "$(message.name:c)"
.   for field where item() = 1
.       for class.header
.           for field as hfield
.              copy hfield before field
.           endfor
.       endfor
.   else
.       for class.header
.           for field as hfield
.              copy hfield to message
.           endfor
.       endfor
.   endfor
.
    $(NAME) - $(string.trim (.?''):left)
.   for field
.       if type = "number"
.           size ?= 8
        $(name)       $(type) $(size)
.           if size = 1
.               field.ctype = "int"
.           elsif size = 2
.               field.ctype = "int"
.           elsif size = 4
.               field.ctype = "long"
.           elsif size = 8
.               field.ctype = "long"
.           else
.               echo "E: bad size $(size) for $(name)"
.           endif
.       elsif type = "octets"
        $(name)       $(type) [$(size)]
.       else
        $(name)       $(type)
.       endif
.       field.name = "$(field.name:c)"
.       for class.field as cfield where cfield.name = field.name
.           if cfield.type <> field.type
.               echo "E: field '$(name)' must have same type everywhere"
.           endif
.       else
.           copy field to class
.       endfor
.   endfor
.endfor
*/

package org.zyre;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;
import java.nio.ByteBuffer;

import org.zeromq.ZFrame;
import org.zeromq.ZMQ;
import org.zeromq.ZMQ.Socket;

//  Opaque class structure
public class $(ClassName) 
{
.for define
    public static final int $(CLASS.NAME)_$(DEFINE.NAME:C)  = $(value);
.endfor

.for message
    public static final int $(MESSAGE.NAME)       = $(id);
.endfor
.for class.field where type = "octets"
    public static final int $(FIELD.NAME)_SIZE    = $(size);
.endfor

    //  Structure of our class
    private ZFrame address;             //  Address of peer if any
    private int id;                     //  $(ClassName) message ID
    private ByteBuffer needle;          //  Read/write pointer for serialization
.for class.field
.   if type = "number"
    private $(ctype) $(name);
.   elsif type = "octets"
    private byte [] $(name) = new byte [$(size)];
.   elsif type = "number"
    private long $(name);
.   elsif type = "string"
    private String $(name);
.   elsif type = "strings"
    private List <String> $(name);
.   elsif type = "dictionary"
    private Map <String, String> $(name);
    private int $(name)Bytes;
.   elsif type = "frame"
    private ZFrame $(name);
.   endif
.endfor


    //  --------------------------------------------------------------------------
    //  Create a new $(ClassName)

    public $(ClassName) (int id)
    {
        this.id = id;
    }


    //  --------------------------------------------------------------------------
    //  Destroy the $(class.name)

    public void destroy ()
    {
        //  Free class properties
        if (address != null)
            address.destroy ();
        address = null;
    }


    //  --------------------------------------------------------------------------
    //  Network data encoding macros


    //  Put a 1-byte number to the frame
    private final void putNumber1 (int value) 
    {
        needle.put ((byte) value);
    }

    //  Get a 1-byte number to the frame
    //  then make it unsigned
    private int getNumber1 () 
    { 
        int value = needle.get (); 
        if (value < 0)
            value = (0xff) & value;
        return value;
    }

    //  Put a 2-byte number to the frame
    private final void putNumber2 (int value) 
    {
        needle.putShort ((short) value);
    }

    //  Get a 2-byte number to the frame
    private int getNumber2 () 
    { 
        int value = needle.getShort (); 
        if (value < 0)
            value = (0xffff) & value;
        return value;
    }

    //  Put a 4-byte number to the frame
    private final void putNumber4 (long value) 
    {
        needle.putInt ((int) value);
    }

    //  Get a 4-byte number to the frame
    //  then make it unsigned
    private long getNumber4 () 
    { 
        long value = needle.getInt (); 
        if (value < 0)
            value = (0xffffffff) & value;
        return value;
    }

    //  Put a 8-byte number to the frame
    public void putNumber8 (long value) 
    {
        needle.putLong (value);
    }

    //  Get a 8-byte number to the frame
    public long getNumber8 () 
    {
        return needle.getLong ();
    }


    //  Put a block to the frame
    private void putBlock (byte [] value, int size) 
    {
        needle.put (value, 0, size);
    }

    private byte [] getBlock (int size) 
    {
        byte [] value = new byte [size]; 
        needle.get (value);

        return value;
    }

    //  Put a string to the frame
    public void putString (String value) 
    {
        needle.put ((byte) value.length ());
        needle.put (value.getBytes());
    }

    //  Get a string from the frame
    public String getString () 
    {
        int size = getNumber1 ();
        byte [] value = new byte [size];
        needle.get (value);

        return new String (value);
    }

    //  --------------------------------------------------------------------------
    //  Receive and parse a $(ClassName) from the socket. Returns new object or
    //  null if error. Will block if there's no message waiting.

    public static $(ClassName) recv (Socket input)
    {
        assert (input != null);
        $(ClassName) self = new $(ClassName) (0);
        ZFrame frame = null;

        try {
            //  Read valid message frame from socket; we loop over any
            //  garbage data we might receive from badly-connected peers
            while (true) {
                //  If we're reading from a ROUTER socket, get address
                if (input.getType () == ZMQ.ROUTER) {
                    self.address = ZFrame.recvFrame (input);
                    if (self.address == null)
                        return null;         //  Interrupted
                    if (!input.hasReceiveMore ())
                        throw new IllegalArgumentException ();
                }
                //  Read and parse command in frame
                frame = ZFrame.recvFrame (input);
                if (frame == null)
                    return null;             //  Interrupted

                //  Get and check protocol signature
                self.needle = ByteBuffer.wrap (frame.getData ()); 
                int signature = self.getNumber2 ();
                if (signature == (0xAAA0 | $(class.signature)))
                    break;                  //  Valid signature

                //  Protocol assertion, drop message
                while (input.hasReceiveMore ()) {
                    frame.destroy ();
                    frame = ZFrame.recvFrame (input);
                }
                frame.destroy ();
            }

            //  Get message id, which is first byte in frame
            self.id = self.getNumber1 ();
            int listSize;
            int hashSize;

            switch (self.id) {
.for class.message
            case $(MESSAGE.NAME):
.   for field
.       if type = "number"
                self.$(name) = self.getNumber$(size) ();
.               if defined (field.value)
                if (self.$(name) != $(field.value:))
                    throw new IllegalArgumentException ();
.               endif
.       elsif type = "octets"
                self.$(name) = self.getBlock ($(size));
.           if defined (field.value)
                if (self.$(name) != $(field.value:))
                    throw new IllegalArgumentException (); 
.           endif
.       elsif type = "string"
                self.$(name) = self.getString ();
.           if defined (field.value)
                if (!self.$(name).equals( "$(field.value:)"))
                    throw new IllegalArgumentException ();
.           endif
.       elsif type = "strings"
                listSize = self.getNumber1 ();
                self.$(name) = new ArrayList<String> ();
                while (listSize-- > 0) {
                    String string = self.getString ();
                    self.$(name).add (string);
                }
.       elsif type = "dictionary"
                hashSize = self.getNumber1 ();
                self.$(name) = new HashMap <String, String> ();
                while (hashSize-- > 0) {
                    String string = self.getString ();
                    String [] kv = string.split("=");
                    self.$(name).put(kv[0], kv[1]);
                }

.       elsif type = "frame"
                //  Get next frame, leave current untouched
                if (!input.hasReceiveMore ())
                    throw new IllegalArgumentException ();
                self.$(name) = ZFrame.recvFrame (input);
.       endif
.    endfor
                break;

.endfor
            default:
                throw new IllegalArgumentException ();
            }

            return self;

        } catch (Exception e) {
            //  Error returns
            System.out.printf ("E: malformed message '%d'\\n", self.id);
            self.destroy ();
            return null;
        } finally {
            if (frame != null)
                frame.destroy ();
        }
    }


.for class.field where type = "dictionary"
    //  Count size of key=value pair
    private static void 
    $(name)Count (final Map.Entry <String, String> entry, $(ClassName) self)
    {
        self.$(name)Bytes += entry.getKey ().length () + 1 + entry.getValue ().length () + 1;
    }

    //  Serialize $(name) key=value pair
    private static void
    $(name)Write (final Map.Entry <String, String> entry, $(ClassName) self)
    {
        String string = entry.getKey () + "=" + entry.getValue ();
        self.putString (string);
    }

.endfor

    //  --------------------------------------------------------------------------
    //  Send the $(ClassName) to the socket, and destroy it

    public boolean send (Socket socket)
    {
        assert (socket != null);

        //  Calculate size of serialized data
        int frameSize = 2 + 1;          //  Signature and message ID
        switch (id) {
.for class.message
        case $(MESSAGE.NAME):
.   for field
.       if type = "number"
            //  $(name) is a $(size)-byte integer
            frameSize += $(size);
.       elsif type = "octets"
            //  $(name) is a block of $(size) bytes
            frameSize += $(size);
.       elsif type = "string"
            //  $(name) is a string with 1-byte length
.           if defined (field.value)
            frameSize += 1 + "$(field.value:)".length ();
.           else
            frameSize++;       //  Size is one octet
            if ($(name) != null)
                frameSize += $(name).length ();
.           endif
.       elsif type = "strings"
            //  $(name) is an array of strings
            frameSize++;       //  Size is one octet
            if ($(name) != null) {
                for (String value : $(name)) 
                    frameSize += 1 + value.length ();
            }
.       elsif type = "dictionary"
            //  $(name) is an array of key=value strings
            frameSize++;       //  Size is one octet
            if ($(name) != null) {
                $(name)Bytes = 0;
                for (Map.Entry <String, String> entry: $(name).entrySet ()) {
                    $(name)Count (entry, this);
                }
                frameSize += $(name)Bytes;
            }
.       endif
.   endfor
            break;
            
.endfor
        default:
            System.out.printf ("E: bad message type '%d', not sent\\n", id);
            assert (false);
        }
        //  Now serialize message into the frame
        ZFrame frame = new ZFrame (new byte [frameSize]);
        needle = ByteBuffer.wrap (frame.getData ()); 
        int frameFlags = 0;
        putNumber2 (0xAAA0 | $(class.signature));
        putNumber1 ((byte) id);

        switch (id) {
.for class.message
        case $(MESSAGE.NAME):
.   for field
.       if type = "number"
.           if defined (field.value)
            putNumber$(size) ($(field.value:));
.           else
            putNumber$(size) ($(name));
.           endif
.       elsif type = "octets"
            putBlock ($(name), $(size));
.       elsif type = "string"
.           if defined (field.value)
            putString ("$(field.value:)");
.           else
            if ($(name) != null)
                putString ($(name));
            else
                putNumber1 ((byte) 0);      //  Empty string
.           endif
.       elsif type = "strings"
            if ($(name) != null) {
                putNumber1 ((byte) $(name).size ());
                for (String value : $(name)) {
                    putString (value);
                }
            }
            else
                putNumber1 ((byte) 0);      //  Empty string array
.       elsif type = "dictionary"
            if ($(name) != null) {
                putNumber1 ((byte) $(name).size ());
                for (Map.Entry <String, String> entry: $(name).entrySet ()) {
                    $(name)Write (entry, this);
                }
            }
            else
                putNumber1 ((byte) 0);      //  Empty dictionary
.       elsif type = "frame"
            frameFlags = ZMQ.SNDMORE;
.       endif
.   endfor
            break;
            
.endfor
        }
        //  If we're sending to a ROUTER, we send the address first
        if (socket.getType () == ZMQ.ROUTER) {
            assert (address != null);
            if (!address.sendAndDestroy (socket, ZMQ.SNDMORE)) {
                destroy ();
                return false;
            }
        }
        //  Now send the data frame
        if (!frame.sendAndDestroy (socket, frameFlags)) {
            frame.destroy ();
            destroy ();
            return false;
        }
        
        //  Now send any frame fields, in order
        switch (id) {
.for class.message where count (field, type = "frame")
        case $(MESSAGE.NAME):
.   for field where type = "frame"
            //  If $(name) isn't set, send an empty frame
            if ($(field.name) == null)
                $(field.name) = new ZFrame ((byte []) null);
.       if last ()
            if (!$(field.name).sendAndDestroy (socket, 0)) {
.       else
            if (!$(field.name).sendAndDestroy (socket, ZMQ.SNDMORE)) {
.       endif
                frame.destroy ();
                destroy ();
                return false;
            }
.   endfor
            break;
.endfor
        }
        //  Destroy $(ClassName) object
        destroy ();
        return true;
    }


.for message
//  --------------------------------------------------------------------------
//  Send the $(message.NAME) to the socket in one step

    public static void send$(Name) (
        Socket output\
.for field
,
.   if type = "number"
        $(ctype) $(name)\
.   elsif type = "octets"
        byte [] $(name)\
.   elsif type = "string"
        String $(name)\
.   elsif type = "strings"
        Collection <String> $(name)\
.   elsif type = "dictionary"
        Map <String, String> $(name)\
.   elsif type = "frame"
        ZFrame $(name)\
.   endif
.endfor
) 
    {
        $(ClassName) self = new $(ClassName) ($(ClassName).$(MESSAGE.NAME));
.for field
.   if type = "number" | type = "octets" | type = "string"
        self.set$(Name) ($(name));
.   elsif type = "strings"
        self.set$(Name) (new ArrayList <String> ($(name)));
.   elsif type = "dictionary"
        self.set$(Name) (new HashMap <String, String> ($(name)));
.   elsif type = "frame"
        self.set$(Name) ($(name).duplicate ());
.   endif
.endfor
        self.send (output); 
    }

.endfor

    //  --------------------------------------------------------------------------
    //  Duplicate the $(ClassName) message

    public $(ClassName) dup ($(ClassName) self)
    {
        if (self == null)
            return null;

        $(ClassName) copy = new $(ClassName) (self.id);
        if (self.address != null)
            copy.address = self.address.duplicate ();
        switch (self.id) {
.for class.message
        case $(MESSAGE.NAME):
.   for field
.       if type = "number"
            copy.$(name) = self.$(name);
.       elsif type = "octets"
            System.arraycopy (copy.$(name), 0, self.$(name), 0, $(size));
.       elsif type = "string"
            copy.$(name) = self.$(name);
.       elsif type = "strings"
            copy.$(name) = new ArrayList <String> (self.$(name));
.       elsif type = "dictionary"
            copy.$(name) = new HashMap <String, String> (self.$(name));
.       elsif type = "frame"
            copy.$(name) = self.$(name).duplicate ();
.       endif
.   endfor
        break;
.endfor
        }
        return copy;
    }

.for class.field where type = "dictionary"
    //  Dump $(name) key=value pair to stdout
    public static void $(name)Dump (Map.Entry <String, String> entry, $(ClassName) self)
    {
        System.out.printf ("        %s=%s\\n", entry.getKey (), entry.getValue ());
    }

.endfor

    //  --------------------------------------------------------------------------
    //  Print contents of message to stdout

    public void dump ()
    {
        switch (id) {
.for class.message
        case $(MESSAGE.NAME):
            System.out.println ("$(MESSAGE.NAME):");
.   for field
.       if type = "number"
.           if defined (field.value)
            System.out.printf ("    $(name)=$(field.value)\\n");
.           else
            System.out.printf ("    $(name)=%d\\n", (long)$(name));
.           endif
.       elsif type = "octets"
            System.out.printf ("    $(name)=");
            int $(name)Index;
            for ($(name)Index = 0; $(name)Index < $(size); $(name)Index++) {
                if ($(name)Index != 0 && ($(name)Index % 4 == 0))
                    System.out.printf ("-");
                System.out.printf ("%02X", $(name) [$(name)Index]);
            }
            System.out.printf ("\\n");
.       elsif type = "string"
.           if defined (field.value)
            System.out.printf ("    $(name)=$(field.value)\\n");
.           else
            if ($(name) != null)
                System.out.printf ("    $(name)='%s'\\n", $(name));
            else
                System.out.printf ("    $(name)=\\n");
.           endif
.       elsif type = "strings"
            System.out.printf ("    $(name)={");
            if ($(name) != null) {
                for (String value : $(name)) {
                    System.out.printf (" '%s'", value);
                }
            }
            System.out.printf (" }\\n");
.       elsif type = "dictionary"
            System.out.printf ("    $(name)={\\n");
            if ($(name) != null) {
                for (Map.Entry <String, String> entry : $(name).entrySet ())
                    $(name)Dump (entry, this);
            }
            System.out.printf ("    }\\n");
.       elsif type = "frame"
            System.out.printf ("    $(name)={\\n");
            if ($(name) != null) {
                int size = $(name).size ();
                byte [] data = $(name).getData ();
                System.out.printf ("        size=%d\\n", $(name).size ());
                if (size > 32)
                    size = 32;
                int $(name)Index;
                for ($(name)Index = 0; $(name)Index < size; $(name)Index++) {
                    if ($(name)Index != 0 && ($(name)Index % 4 == 0))
                        System.out.printf ("-");
                    System.out.printf ("%02X", data [$(name)Index]);
                }
            }
            System.out.printf ("    }\\n");
.       endif
.   endfor
            break;
            
.endfor
        }
    }


    //  --------------------------------------------------------------------------
    //  Get/set the message address

    public ZFrame address ()
    {
        return address;
    }

    public void setAddress (ZFrame address)
    {
        if (this.address != null)
            this.address.destroy ();
        this.address = address.duplicate ();
    }


    //  --------------------------------------------------------------------------
    //  Get/set the $(class.name) id

    public int id ()
    {
        return id;
    }

    public void setId (int id)
    {
        this.id = id;
    }

.for class.field where !defined (value)
.   if type = "number"
    //  --------------------------------------------------------------------------
    //  Get/set the $(name) field

    public $(ctype) $(name) ()
    {
        return $(name);
    }

    public void set$(Name) ($(ctype) $(name))
    {
        this.$(name) = $(name);
    }

.   elsif type = "octets"
    //  --------------------------------------------------------------------------
    //  Get/set the $(name) field

    public byte [] $(name) ()
    {
        return $(name);
    }

    public void set$(Name) (byte [] $(name))
    {
        System.arraycopy ($(name), 0, this.$(name), 0, $(size));
    }

.   elsif type = "string"
    //  --------------------------------------------------------------------------
    //  Get/set the $(name) field

    public String $(name) ()
    {
        return $(name);
    }

    public void set$(Name) (String format, Object ... args)
    {
        //  Format into newly allocated string
        $(name) = String.format (format, args);
    }

.   elsif type = "strings"
    //  --------------------------------------------------------------------------
    //  Iterate through the $(name) field, and append a $(name) value

    public List <String> $(name) ()
    {
        return $(name);
    }

    public void append$(Name) (String format, Object ... args)
    {
        //  Format into newly allocated string
        
        String string = String.format (format, args);
        //  Attach string to list
        if ($(name) == null)
            $(name) = new ArrayList <String> ();
        $(name).add (string);
    }

    public void set$(Name) (Collection <String> value)
    {
        $(name) = new ArrayList (value); 
    }

.   elsif type = "dictionary"
    //  --------------------------------------------------------------------------
    //  Get/set a value in the $(name) dictionary

    public Map <String, String> $(name) ()
    {
        return $(name);
    }

    public String $(name)String (String key, String defaultValue)
    {
        String value = null;
        if ($(name) != null)
            value = $(name).get (key);
        if (value == null)
            value = defaultValue;

        return value;
    }

    public long $(name)Number (String key, long defaultValue)
    {
        long value = defaultValue;
        String string = null;
        if ($(name) != null)
            string = $(name).get (key);
        if (string != null)
            value = Long.valueOf (string);

        return value;
    }

    public void insert$(Name) (String key, String format, Object ... args)
    {
        //  Format string into buffer
        String string = String.format (format, args);

        //  Store string in hash table
        if ($(name) == null)
            $(name) = new HashMap <String, String> ();
        $(name).put (key, string);
        $(name)Bytes += key.length () + 1 + string.length ();
    }

    public void set$(Name) (Map <String, String> value)
    {
        $(name) = new HashMap <String, String> (value); 
    }

.   elsif type = "frame"
    //  --------------------------------------------------------------------------
    //  Get/set the $(name) field

    public ZFrame $(name) ()
    {
        return $(name);
    }

    //  Takes ownership of supplied frame
    public void set$(Name) (ZFrame frame)
    {
        if ($(name) != null)
            $(name).destroy ();
        $(name) = frame;
    }
.   endif

.endfor
}

.echo "Generating ../Java/src/test/java/org/zyre/Test$(ClassName).java..."
.output "../Java/src/test/java/org/zyre/Test$(ClassName).java"
//  --------------------------------------------------------------------------
//  Selftest

package org.zyre;

import static org.junit.Assert.*;
import org.junit.Test;
import org.zeromq.ZMQ;
import org.zeromq.ZMQ.Socket;
import org.zeromq.ZFrame;
import org.zeromq.ZContext;

public class Test$(ClassName)
{
    @Test
    public void test$(ClassName) ()
    {
        System.out.printf (" * $(class.name): ");

        //  Simple create/destroy test
        $(ClassName) self = new $(ClassName) (0);
        assert (self != null);
        self.destroy ();

        //  Create pair of sockets we can send through
        ZContext ctx = new ZContext ();
        assert (ctx != null);

        Socket output = ctx.createSocket (ZMQ.DEALER);
        assert (output != null);
        output.bind ("inproc://selftest");
        Socket input = ctx.createSocket (ZMQ.ROUTER);
        assert (input != null);
        input.connect ("inproc://selftest");
        
        //  Encode/send/decode and verify each message type
.for class.message

        self = new $(ClassName) ($(ClassName).$(MESSAGE.NAME));
.   for field where !defined (value)
.       if type = "number"
        self.set$(Name) ((byte) 123);
.       elsif type = "octets"
        byte [] $(name)Data = new byte [$(ClassName).$(FIELD.NAME)_SIZE];
        for (int i=0; i < $(ClassName).$(FIELD.NAME)_SIZE; i++)
            $(name)Data [i] = 123;
        self.set$(Name) ($(name)Data);
.       elsif type = "string"
        self.set$(Name) ("Life is short but Now lasts for ever");
.       elsif type = "strings"
        self.append$(Name) ("Name: %s", "Brutus");
        self.append$(Name) ("Age: %d", 43);
.       elsif type = "dictionary"
        self.insert$(Name) ("Name", "Brutus");
        self.insert$(Name) ("Age", "%d", 43);
.       elsif type = "frame"
        self.set$(Name) (new ZFrame ("Captcha Diem"));
.       endif
.   endfor
        self.send (output);
    
        self = $(ClassName).recv (input);
        assert (self != null);
.   for field where !defined (value)
.       if type = "number"
        assertEquals (self.$(name) (), 123);
.       elsif type = "octets"
        assertEquals (self.$(name) () [0], 123);
        assertEquals (self.$(name) () [$(ClassName).$(FIELD.NAME)_SIZE - 1], 123);
.       elsif type = "string"
        assertEquals (self.$(name) (), "Life is short but Now lasts for ever");
.       elsif type = "strings"
        assertEquals (self.$(name) ().size (), 2);
        assertEquals (self.$(name) ().get (0), "Name: Brutus");
        assertEquals (self.$(name) ().get (1), "Age: 43");
.       elsif type = "dictionary"
        assertEquals (self.$(name) ().size (), 2);
        assertEquals (self.$(name)String ("Name", "?"), "Brutus");
        assertEquals (self.$(name)Number ("Age", 0), 43);
.       elsif type = "frame"
        assertTrue (self.$(name) ().streq ("Captcha Diem"));
.       endif
.   endfor
        self.destroy ();
.endfor

        ctx.destroy ();
        System.out.printf ("OK\\n");
    }
}
