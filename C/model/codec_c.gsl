.#  codec_c.gsl
.#
.#  Generates a codec for a protocol specification
.#
.include "library.gsl"
.resolve_includes ()
.echo "Generating ../include/$(class.name).h..."
.output "../include/$(class.name).h"
/*  =========================================================================
    $(class.name).h
    
    Generated codec header for $(class.name)
    -------------------------------------------------------------------------
    $(string.trim (class->license.):block                                   )
    =========================================================================
*/

#ifndef __$(CLASS.NAME)_H_INCLUDED__
#define __$(CLASS.NAME)_H_INCLUDED__

/*  These are the $(class.name) messages
.for message
.   message.name = "$(message.name:c)"

    $(NAME) - $(string.trim (.?''):left)
.   for field
.       field.name = "$(field.name:c)"
.       for class.field as cfield where cfield.name = field.name
.           if cfield.type <> field.type
.               echo "E: field '$(name)' must have same type everywhere"
.           endif
.       else
.           copy field to class
.       endfor
.       if type = "number"
.           size ?= 8
.           if size = 1
.               ctype = "byte"
.           elsif size = 2
.               ctype = "int16_t"
.           elsif size = 4
.               ctype = "int32_t"
.           elsif size = 8
.               ctype = "int64_t"
.           else
.               echo "E: bad size $(size) for $(name)"
.           endif
.       elsif type = "octets"
        $(name)       $(type) [$(size)]
.       else
        $(name)       $(type)
.       endif
.   endfor
.endfor
*/

.for define
#define $(CLASS.NAME)_$(DEFINE.NAME:C)      $(value)
.endfor

.for message
#define $(CLASS.NAME)_$(MESSAGE.NAME)       $(id)
.endfor
.for class.field where type = "octets"
#define $(CLASS.NAME)_$(FIELD.NAME)_SIZE    $(size)
.endfor

#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
typedef struct _$(class.name)_t $(class.name)_t;

//  Create a new $(class.name)
$(class.name)_t *
    $(class.name)_new (int id);

//  Destroy the $(class.name)
void
    $(class.name)_destroy ($(class.name)_t **self_p);

//  Receive and parse a $(class.name) from the socket
$(class.name)_t *
    $(class.name)_recv (void *socket);

//  Send the $(class.name) to the socket, and destroy it
int
    $(class.name)_send ($(class.name)_t **self_p, void *socket);

//  Duplicate the $(class.name) message
$(class.name)_t *
    $(class.name)_dup ($(class.name)_t *self);

//  Print contents of message to stdout
void
    $(class.name)_dump ($(class.name)_t *self);

//  Get/set the message address
zframe_t *
    $(class.name)_address ($(class.name)_t *self);
void
    $(class.name)_address_set ($(class.name)_t *self, zframe_t *address);

//  Get the $(class.name) id and printable command
int
    $(class.name)_id ($(class.name)_t *self);
void
    $(class.name)_id_set ($(class.name)_t *self, int id);
char *
    $(class.name)_command ($(class.name)_t *self);

.for class.field where !defined (value)
.   if type = "number"
//  Get/set the $(name) field
$(ctype)
    $(class.name)_$(name) ($(class.name)_t *self);
void
    $(class.name)_$(name)_set ($(class.name)_t *self, $(ctype) $(name));
.#
.   elsif type = "octets"
//  Get/set the $(name) field
byte *
    $(class.name)_$(name) ($(class.name)_t *self);
void
    $(class.name)_$(name)_set ($(class.name)_t *self, byte *$(name));
.#
.   elsif type = "string"
//  Get/set the $(name) field
char *
    $(class.name)_$(name) ($(class.name)_t *self);
void
    $(class.name)_$(name)_set ($(class.name)_t *self, char *format, ...);
.#
.   elsif type = "strings"
//  Get/set the $(name) field
zlist_t *
    $(class.name)_$(name) ($(class.name)_t *self);
void
    $(class.name)_$(name)_set ($(class.name)_t *self, zlist_t *$(name));

//  Iterate through the $(name) field, and append a $(name) value
char *
    $(class.name)_$(name)_first ($(class.name)_t *self);
char *
    $(class.name)_$(name)_next ($(class.name)_t *self);
void
    $(class.name)_$(name)_append ($(class.name)_t *self, char *format, ...);
size_t
    $(class.name)_$(name)_size ($(class.name)_t *self);
.#
.   elsif type = "dictionary"
//  Get/set the $(name) field
zhash_t *
    $(class.name)_$(name) ($(class.name)_t *self);
void
    $(class.name)_$(name)_set ($(class.name)_t *self, zhash_t *$(name));
    
//  Get/set a value in the $(name) dictionary
char *
    $(class.name)_$(name)_string ($(class.name)_t *self, char *key, char *default_value);
int64_t
    $(class.name)_$(name)_number ($(class.name)_t *self, char *key, int64_t default_value);
void
    $(class.name)_$(name)_insert ($(class.name)_t *self, char *key, char *format, ...);
size_t
    $(class.name)_$(name)_size ($(class.name)_t *self);
.#
.   elsif type = "frame"
//  Get/set the $(name) field
zframe_t *
    $(class.name)_$(name) ($(class.name)_t *self);
void
    $(class.name)_$(name)_set ($(class.name)_t *self, zframe_t *frame);
.#
.   else
.       echo "E: unknown type '$(type)' for field '$(name)'"
.   endif

.endfor
//  Self test of this class
int
    $(class.name)_test (bool verbose);
    
#ifdef __cplusplus
}
#endif

#endif
.echo "Generating ../src/$(class.name).c..."
.output "../src/$(class.name).c"
/*  =========================================================================
    $(class.name).c

    Generated codec implementation for $(class.name)
    -------------------------------------------------------------------------
    $(string.trim (class->license.):block                                   )
    =========================================================================
*/

#include <czmq.h>
#include "../include/$(class.name).h"

//  Structure of our class

struct _$(class.name)_t {
    zframe_t *address;          //  Address of peer if any
    int id;                     //  $(class.name) message ID
    byte *needle;               //  Read/write pointer for serialization
    byte *ceiling;              //  Valid upper limit for read pointer
.for class.field
.   if type = "number"
    $(ctype) $(name);
.   elsif type = "octets"
    byte $(name) [$(size)];
.   elsif type = "string"
    char *$(name);
.   elsif type = "strings"
    zlist_t *$(name);
.   elsif type = "dictionary"
    zhash_t *$(name);
    size_t $(name)_bytes;       //  Size of dictionary content
.   elsif type = "frame"
    zframe_t *$(name);
.   endif
.endfor
};

//  --------------------------------------------------------------------------
//  Network data encoding macros

//  Strings are encoded with 1-byte length
#define STRING_MAX  255

//  Put a block to the frame
#define PUT_BLOCK(host,size) { \\
    memcpy (self->needle, (host), size); \\
    self->needle += size; \\
    }

//  Get a block from the frame
#define GET_BLOCK(host,size) { \\
    if (self->needle + size > self->ceiling) \\
        goto malformed; \\
    memcpy ((host), self->needle, size); \\
    self->needle += size; \\
    }

//  Put a 1-byte number to the frame
#define PUT_NUMBER1(host) { \\
    *(byte *) self->needle = (host); \\
    self->needle++; \\
    }

//  Put a 2-byte number to the frame
#define PUT_NUMBER2(host) { \\
    self->needle [0] = (byte) (((host) >> 8)  & 255); \\
    self->needle [1] = (byte) (((host))       & 255); \\
    self->needle += 2; \\
    }

//  Put a 4-byte number to the frame
#define PUT_NUMBER4(host) { \\
    self->needle [0] = (byte) (((host) >> 24) & 255); \\
    self->needle [1] = (byte) (((host) >> 16) & 255); \\
    self->needle [2] = (byte) (((host) >> 8)  & 255); \\
    self->needle [3] = (byte) (((host))       & 255); \\
    self->needle += 4; \\
    }

//  Put a 8-byte number to the frame
#define PUT_NUMBER8(host) { \\
    self->needle [0] = (byte) (((host) >> 56) & 255); \\
    self->needle [1] = (byte) (((host) >> 48) & 255); \\
    self->needle [2] = (byte) (((host) >> 40) & 255); \\
    self->needle [3] = (byte) (((host) >> 32) & 255); \\
    self->needle [4] = (byte) (((host) >> 24) & 255); \\
    self->needle [5] = (byte) (((host) >> 16) & 255); \\
    self->needle [6] = (byte) (((host) >> 8)  & 255); \\
    self->needle [7] = (byte) (((host))       & 255); \\
    self->needle += 8; \\
    }

//  Get a 1-byte number from the frame
#define GET_NUMBER1(host) { \\
    if (self->needle + 1 > self->ceiling) \\
        goto malformed; \\
    (host) = *(byte *) self->needle; \\
    self->needle++; \\
    }

//  Get a 2-byte number from the frame
#define GET_NUMBER2(host) { \\
    if (self->needle + 2 > self->ceiling) \\
        goto malformed; \\
    (host) = ((int16_t) (self->needle [0]) << 8) \\
           +  (int16_t) (self->needle [1]); \\
    self->needle += 2; \\
    }

//  Get a 4-byte number from the frame
#define GET_NUMBER4(host) { \\
    if (self->needle + 4 > self->ceiling) \\
        goto malformed; \\
    (host) = ((int32_t) (self->needle [0]) << 24) \\
           + ((int32_t) (self->needle [1]) << 16) \\
           + ((int32_t) (self->needle [2]) << 8) \\
           +  (int32_t) (self->needle [3]); \\
    self->needle += 4; \\
    }

//  Get a 8-byte number from the frame
#define GET_NUMBER8(host) { \\
    if (self->needle + 8 > self->ceiling) \\
        goto malformed; \\
    (host) = ((int64_t) (self->needle [0]) << 56) \\
           + ((int64_t) (self->needle [1]) << 48) \\
           + ((int64_t) (self->needle [2]) << 40) \\
           + ((int64_t) (self->needle [3]) << 32) \\
           + ((int64_t) (self->needle [4]) << 24) \\
           + ((int64_t) (self->needle [5]) << 16) \\
           + ((int64_t) (self->needle [6]) << 8) \\
           +  (int64_t) (self->needle [7]); \\
    self->needle += 8; \\
    }

//  Put a string to the frame
#define PUT_STRING(host) { \\
    string_size = strlen (host); \\
    PUT_NUMBER1 (string_size); \\
    memcpy (self->needle, (host), string_size); \\
    self->needle += string_size; \\
    }

//  Get a string from the frame
#define GET_STRING(host) { \\
    GET_NUMBER1 (string_size); \\
    if (self->needle + string_size > (self->ceiling)) \\
        goto malformed; \\
    (host) = (char *) malloc (string_size + 1); \\
    memcpy ((host), self->needle, string_size); \\
    (host) [string_size] = 0; \\
    self->needle += string_size; \\
    }


//  --------------------------------------------------------------------------
//  Create a new $(class.name)

$(class.name)_t *
$(class.name)_new (int id)
{
    $(class.name)_t *self = ($(class.name)_t *) zmalloc (sizeof ($(class.name)_t));
    self->id = id;
    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(class.name)

void
$(class.name)_destroy ($(class.name)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(class.name)_t *self = *self_p;

        //  Free class properties
        zframe_destroy (&self->address);
.for class.field
.   if type = "string"
        free (self->$(name));
.   elsif type = "strings"
        if (self->$(name))
            zlist_destroy (&self->$(name));
.   elsif type = "dictionary"
        zhash_destroy (&self->$(name));
.   elsif type = "frame"
        zframe_destroy (&self->$(name));
.   endif
.endfor

        //  Free object itself
        free (self);
        *self_p = NULL;
    }
}


//  --------------------------------------------------------------------------
//  Receive and parse a $(class.name) from the socket. Returns new object or
//  NULL if error. Will block if there's no message waiting.

$(class.name)_t *
$(class.name)_recv (void *socket)
{
    assert (socket);
    $(class.name)_t *self = $(class.name)_new (0);
    zframe_t *frame = NULL;

    //  If we're reading from a ROUTER socket, get address
    if (zsockopt_type (socket) == ZMQ_ROUTER) {
        self->address = zframe_recv (socket);
        if (!self->address)
            goto empty;         //  Interrupted
        if (!zsocket_rcvmore (socket))
            goto malformed;
    }
    //  Read and parse command in frame
    frame = zframe_recv (socket);
    if (!frame)
        goto empty;             //  Interrupted
    self->needle = zframe_data (frame);
    self->ceiling = self->needle + zframe_size (frame);
    size_t string_size;
    size_t list_size;
    size_t hash_size;

    //  Get message id, which is first byte in frame
    GET_NUMBER1 (self->id);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
            GET_NUMBER$(size) (self->$(name));
.           if defined (field.value)
            if (self->$(name) != $(field.value:))
                goto malformed;
.           endif
.       elsif type = "octets"
            GET_BLOCK (self->$(name), $(size));
.       elsif type = "string"
            free (self->$(name));
            GET_STRING (self->$(name));
.           if defined (field.value)
            if (strneq (self->$(name), "$(field.value:)"))
                goto malformed;
.           endif
.       elsif type = "strings"
            GET_NUMBER1 (list_size);
            self->$(name) = zlist_new ();
            zlist_autofree (self->$(name));
            while (list_size--) {
                char *string;
                GET_STRING (string);
                zlist_append (self->$(name), string);
            }
.       elsif type = "dictionary"
            GET_NUMBER1 (hash_size);
            self->$(name) = zhash_new ();
            while (hash_size--) {
                char *string;
                GET_STRING (string);
                char *value = strchr (string, '=');
                if (value)
                    *value++ = 0;
                zhash_insert (self->$(name), string, strdup (value));
                zhash_freefn (self->$(name), string, free);
                free (string);
            }
.       elsif type = "frame"
            //  Get next frame, leave current untouched
            if (!zsocket_rcvmore (socket))
                goto malformed;
            self->$(name) = zframe_recv (socket);
.       endif
.   endfor
            break;

.endfor
        default:
            goto malformed;
    }
    //  Successful return
    zframe_destroy (&frame);
    return self;

    //  Error returns
    malformed:
        printf ("E: malformed message '%d'\\n", self->id);
    empty:
        zframe_destroy (&frame);
        $(class.name)_destroy (&self);
        return (NULL);
}

.for class.field where type = "dictionary"
//  Count size of key=value pair
static int
s_$(name)_count (const char *key, void *item, void *argument)
{
    $(class.name)_t *self = ($(class.name)_t *) argument;
    self->$(name)_bytes += strlen (key) + 1 + strlen ((char *) item) + 1;
    return 0;
}

//  Serialize $(name) key=value pair
static int
s_$(name)_write (const char *key, void *item, void *argument)
{
    $(class.name)_t *self = ($(class.name)_t *) argument;
    char string [STRING_MAX + 1];
    snprintf (string, STRING_MAX, "%s=%s", key, (char *) item);
    size_t string_size;
    PUT_STRING (string);
    return 0;
}

.endfor

//  --------------------------------------------------------------------------
//  Send the $(class.name) to the socket, and destroy it
//  Returns 0 if OK, else -1

int
$(class.name)_send ($(class.name)_t **self_p, void *socket)
{
    assert (socket);
    assert (self_p);
    assert (*self_p);

    //  Calculate size of serialized data
    $(class.name)_t *self = *self_p;
    size_t frame_size = 1;
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
            //  $(name) is a $(size)-byte integer
            frame_size += $(size);
.       elsif type = "octets"
            //  $(name) is a block of $(size) bytes
            frame_size += $(size);
.       elsif type = "string"
            //  $(name) is a string with 1-byte length
.           if defined (field.value)
            frame_size += 1 + strlen ("$(field.value:)");
.           else
            frame_size++;       //  Size is one octet
            if (self->$(name))
                frame_size += strlen (self->$(name));
.           endif
.       elsif type = "strings"
            //  $(name) is an array of strings
            frame_size++;       //  Size is one octet
            if (self->$(name)) {
                //  Add up size of list contents
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    frame_size += 1 + strlen ($(name));
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
.       elsif type = "dictionary"
            //  $(name) is an array of key=value strings
            frame_size++;       //  Size is one octet
            if (self->$(name)) {
                self->$(name)_bytes = 0;
                //  Add up size of dictionary contents
                zhash_foreach (self->$(name), s_$(name)_count, self);
            }
            frame_size += self->$(name)_bytes;
.       endif
.   endfor
            break;
            
.endfor
        default:
            printf ("E: bad message type '%d', not sent\\n", self->id);
            //  No recovery, this is a fatal application error
            assert (false);
    }
    //  Now serialize message into the frame
    zframe_t *frame = zframe_new (NULL, frame_size + 1);
    self->needle = zframe_data (frame);
    size_t string_size;
    int frame_flags = 0;
    PUT_NUMBER1 (self->id);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
.           if defined (field.value)
            PUT_NUMBER$(size) ($(field.value:));
.           else
            PUT_NUMBER$(size) (self->$(name));
.           endif
.       elsif type = "octets"
            PUT_BLOCK (self->$(name), $(size));
.       elsif type = "string"
.           if defined (field.value)
            PUT_STRING ("$(field.value:)");
.           else
            if (self->$(name)) {
                PUT_STRING (self->$(name));
            }
            else
                PUT_NUMBER1 (0);    //  Empty string
.           endif
.       elsif type = "strings"
            if (self->$(name) != NULL) {
                PUT_NUMBER1 (zlist_size (self->$(name)));
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    PUT_STRING ($(name));
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
            else
                PUT_NUMBER1 (0);    //  Empty string array
.       elsif type = "dictionary"
            if (self->$(name) != NULL) {
                PUT_NUMBER1 (zhash_size (self->$(name)));
                zhash_foreach (self->$(name), s_$(name)_write, self);
            }
            else
                PUT_NUMBER1 (0);    //  Empty dictionary
.       elsif type = "frame"
            frame_flags = ZFRAME_MORE;
.       endif
.   endfor
            break;
            
.endfor
    }
    //  If we're sending to a ROUTER, we send the address first
    if (zsockopt_type (socket) == ZMQ_ROUTER) {
        assert (self->address);
        if (zframe_send (&self->address, socket, ZFRAME_MORE))
            return -1;
    }
    //  Now send the data frame
    if (zframe_send (&frame, socket, frame_flags)) {
        zframe_destroy (&frame);
        return -1;
    }
    
    //  Now send any frame fields, in order
    switch (self->id) {
.for class.message where count (field, type = "frame")
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field where type = "frame"
            //  If $(name) isn't set, send an empty frame
            if (!self->$(field.name))
                self->$(field.name) = zframe_new (NULL, 0);
.       if last ()
            if (zframe_send (&self->$(field.name), socket, 0)) {
.       else
            if (zframe_send (&self->$(field.name), socket, ZFRAME_MORE)) {
.       endif
                zframe_destroy (&frame);
                return -1;
            }
.   endfor
            break;
.endfor
    }
    //  Destroy $(class.name) object
    $(class.name)_destroy (self_p);
    return 0;
}


//  --------------------------------------------------------------------------
//  Duplicate the $(class.name) message

$(class.name)_t *
$(class.name)_dup ($(class.name)_t *self)
{
    if (!self)
        return NULL;
        
    $(class.name)_t *copy = $(class.name)_new (self->id);
    if (self->address)
        copy->address = zframe_dup (self->address);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
            copy->$(name) = self->$(name);
.       elsif type = "octets"
            memcpy (copy->$(name), self->$(name), $(size));
.       elsif type = "string"
            copy->$(name) = strdup (self->$(name));
.       elsif type = "strings"
            copy->$(name) = zlist_copy (self->$(name));
.       elsif type = "dictionary"
            copy->$(name) = zhash_dup (self->$(name));
.       elsif type = "frame"
            copy->$(name) = zframe_dup (self->$(name));
.       endif
.   endfor
            break;

.endfor
    }
    return copy;
}


.for class.field where type = "dictionary"
//  Dump $(name) key=value pair to stdout
int
s_$(name)_dump (const char *key, void *item, void *argument)
{
    $(class.name)_t *self = ($(class.name)_t *) argument;
    printf ("        %s=%s\\n", key, (char *) item);
    return 0;
}

.endfor

//  --------------------------------------------------------------------------
//  Print contents of message to stdout

void
$(class.name)_dump ($(class.name)_t *self)
{
    assert (self);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
            puts ("$(MESSAGE.NAME):");
.   for field
.       if type = "number"
.           if defined (field.value)
            printf ("    $(name)=$(field.value)\\n");
.           else
            printf ("    $(name)=%ld\\n", (long) self->$(name));
.           endif
.       elsif type = "octets"
            printf ("    $(name)=");
            int $(name)_index;
            for ($(name)_index = 0; $(name)_index < $(size); $(name)_index++) {
                if ($(name)_index && ($(name)_index % 4 == 0))
                    printf ("-");
                printf ("%02X", self->$(name) [$(name)_index]);
            }
            printf ("\\n");
.       elsif type = "string"
.           if defined (field.value)
            printf ("    $(name)=$(field.value)\\n");
.           else
            if (self->$(name))
                printf ("    $(name)='%s'\\n", self->$(name));
            else
                printf ("    $(name)=\\n");
.           endif
.       elsif type = "strings"
            printf ("    $(name)={");
            if (self->$(name)) {
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    printf (" '%s'", $(name));
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
            printf (" }\\n");
.       elsif type = "dictionary"
            printf ("    $(name)={\\n");
            if (self->$(name))
                zhash_foreach (self->$(name), s_$(name)_dump, self);
            printf ("    }\\n");
.       elsif type = "frame"
            printf ("    $(name)={\\n");
            if (self->$(name)) {
                size_t size = zframe_size (self->$(name));
                byte *data = zframe_data (self->$(name));
                printf ("        size=%td\\n", zframe_size (self->$(name)));
                if (size > 32)
                    size = 32;
                int $(name)_index;
                for ($(name)_index = 0; $(name)_index < size; $(name)_index++) {
                    if ($(name)_index && ($(name)_index % 4 == 0))
                        printf ("-");
                    printf ("%02X", data [$(name)_index]);
                }
            }
            printf ("    }\\n");
.       endif
.   endfor
            break;
            
.endfor
    }
}


//  --------------------------------------------------------------------------
//  Get/set the message address

zframe_t *
$(class.name)_address ($(class.name)_t *self)
{
    assert (self);
    return self->address;
}

void
$(class.name)_address_set ($(class.name)_t *self, zframe_t *address)
{
    if (self->address)
        zframe_destroy (&self->address);
    self->address = zframe_dup (address);
}


//  --------------------------------------------------------------------------
//  Get/set the $(class.name) id

int
$(class.name)_id ($(class.name)_t *self)
{
    assert (self);
    return self->id;
}

void
$(class.name)_id_set ($(class.name)_t *self, int id)
{
    self->id = id;
}

//  --------------------------------------------------------------------------
//  Return a printable command string

char *
$(class.name)_command ($(class.name)_t *self)
{
    assert (self);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
            return ("$(MESSAGE.NAME)");
            break;
.endfor
    }
    return "?";
}


.for class.field where !defined (value)
.   if type = "number"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

$(ctype)
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_$(name)_set ($(class.name)_t *self, $(ctype) $(name))
{
    assert (self);
    self->$(name) = $(name);
}

.   elsif type = "octets"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

byte *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_$(name)_set ($(class.name)_t *self, byte *$(name))
{
    assert (self);
    memcpy (self->$(name), $(name), $(size));
}

.   elsif type = "string"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

char *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_$(name)_set ($(class.name)_t *self, char *format, ...)
{
    //  Format into newly allocated string
    assert (self);
    va_list argptr;
    va_start (argptr, format);
    free (self->$(name));
    self->$(name) = (char *) malloc (STRING_MAX + 1);
    assert (self->$(name));
    vsnprintf (self->$(name), STRING_MAX, format, argptr);
    va_end (argptr);
}

.   elsif type = "strings"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

zlist_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Greedy function, takes ownership of name; if you don't want that
//  then use zlist_dup() to pass a copy of $(name)

void
$(class.name)_$(name)_set ($(class.name)_t *self, zlist_t *$(name))
{
    assert (self);
    zlist_destroy (&self->$(name));
    self->$(name) = $(name);
}

//  --------------------------------------------------------------------------
//  Iterate through the $(name) field, and append a $(name) value

char *
$(class.name)_$(name)_first ($(class.name)_t *self)
{
    assert (self);
    if (self->$(name))
        return (char *) (zlist_first (self->$(name)));
    else
        return NULL;
}

char *
$(class.name)_$(name)_next ($(class.name)_t *self)
{
    assert (self);
    if (self->$(name))
        return (char *) (zlist_next (self->$(name)));
    else
        return NULL;
}

void
$(class.name)_$(name)_append ($(class.name)_t *self, char *format, ...)
{
    //  Format into newly allocated string
    assert (self);
    va_list argptr;
    va_start (argptr, format);
    char *string = (char *) malloc (STRING_MAX + 1);
    assert (string);
    vsnprintf (string, STRING_MAX, format, argptr);
    va_end (argptr);
    
    //  Attach string to list
    if (!self->$(name)) {
        self->$(name) = zlist_new ();
        zlist_autofree (self->$(name));
    }
    zlist_append (self->$(name), string);
}

size_t
$(class.name)_$(name)_size ($(class.name)_t *self)
{
    return zlist_size (self->$(name));
}

.   elsif type = "dictionary"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

zhash_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Greedy function, takes ownership of name; if you don't want that
//  then use zhash_dup() to pass a copy of $(name)

void
$(class.name)_$(name)_set ($(class.name)_t *self, zhash_t *$(name))
{
    assert (self);
    zhash_destroy (&self->$(name));
    self->$(name) = $(name);
}

//  --------------------------------------------------------------------------
//  Get/set a value in the $(name) dictionary

char *
$(class.name)_$(name)_string ($(class.name)_t *self, char *key, char *default_value)
{
    assert (self);
    char *value = NULL;
    if (self->$(name))
        value = (char *) (zhash_lookup (self->$(name), key));
    if (!value)
        value = default_value;

    return value;
}

int64_t
$(class.name)_$(name)_number ($(class.name)_t *self, char *key, int64_t default_value)
{
    assert (self);
    int64_t value = default_value;
    char *string;
    if (self->$(name))
        string = (char *) (zhash_lookup (self->$(name), key));
    if (string)
        value = atol (string);

    return value;
}

void
$(class.name)_$(name)_insert ($(class.name)_t *self, char *key, char *format, ...)
{
    //  Format string into buffer
    assert (self);
    va_list argptr;
    va_start (argptr, format);
    char *string = (char *) malloc (STRING_MAX + 1);
    assert (string);
    vsnprintf (string, STRING_MAX, format, argptr);
    va_end (argptr);

    //  Store string in hash table
    if (!self->$(name))
        self->$(name) = zhash_new ();
    if (zhash_insert (self->$(name), key, string) == 0)
        zhash_freefn (self->$(name), key, free);
}

size_t
$(class.name)_$(name)_size ($(class.name)_t *self)
{
    return zhash_size (self->$(name));
}

.   elsif type = "frame"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

zframe_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Takes ownership of supplied frame
void
$(class.name)_$(name)_set ($(class.name)_t *self, zframe_t *frame)
{
    assert (self);
    if (self->$(name))
        zframe_destroy (&self->$(name));
    self->$(name) = frame;
}
.   endif

.endfor

//  --------------------------------------------------------------------------
//  Selftest

int
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): ");

    //  Simple create/destroy test
    $(class.name)_t *self = $(class.name)_new (0);
    assert (self);
    $(class.name)_destroy (&self);

    //  Create pair of sockets we can send through
    zctx_t *ctx = zctx_new ();
    assert (ctx);

    void *output = zsocket_new (ctx, ZMQ_DEALER);
    assert (output);
    zsocket_bind (output, "inproc://selftest");
    void *input = zsocket_new (ctx, ZMQ_ROUTER);
    assert (input);
    zsocket_connect (input, "inproc://selftest");
    
    //  Encode/send/decode and verify each message type
.for class.message

    self = $(class.name)_new ($(CLASS.NAME)_$(MESSAGE.NAME));
.   for field where !defined (value)
.       if type = "number"
    $(class.name)_$(name)_set (self, 123);
.       elsif type = "octets"
    byte $(name)_data [$(CLASS.NAME)_$(FIELD.NAME)_SIZE];
    memset ($(name)_data, 123, $(CLASS.NAME)_$(FIELD.NAME)_SIZE);
    $(class.name)_$(name)_set (self, $(name)_data);
.       elsif type = "string"
    $(class.name)_$(name)_set (self, "Life is short but Now lasts for ever");
.       elsif type = "strings"
    $(class.name)_$(name)_append (self, "Name: %s", "Brutus");
    $(class.name)_$(name)_append (self, "Age: %d", 43);
.       elsif type = "dictionary"
    $(class.name)_$(name)_insert (self, "Name", "Brutus");
    $(class.name)_$(name)_insert (self, "Age", "%d", 43);
.       elsif type = "frame"
    $(class.name)_$(name)_set (self, zframe_new ("Captcha Diem", 12));
.       endif
.   endfor
    $(class.name)_send (&self, output);
    
    self = $(class.name)_recv (input);
    assert (self);
.   for field where !defined (value)
.       if type = "number"
    assert ($(class.name)_$(name) (self) == 123);
.       elsif type = "octets"
    assert ($(class.name)_$(name) (self) [0] == 123);
    assert ($(class.name)_$(name) (self) [$(CLASS.NAME)_$(FIELD.NAME)_SIZE - 1] == 123);
.       elsif type = "string"
    assert (streq ($(class.name)_$(name) (self), "Life is short but Now lasts for ever"));
.       elsif type = "strings"
    assert ($(class.name)_$(name)_size (self) == 2);
    assert (streq ($(class.name)_$(name)_first (self), "Name: Brutus"));
    assert (streq ($(class.name)_$(name)_next (self), "Age: 43"));
.       elsif type = "dictionary"
    assert ($(class.name)_$(name)_size (self) == 2);
    assert (streq ($(class.name)_$(name)_string (self, "Name", "?"), "Brutus"));
    assert ($(class.name)_$(name)_number (self, "Age", 0) == 43);
.       elsif type = "frame"
    assert (zframe_streq ($(class.name)_$(name) (self), "Captcha Diem"));
.       endif
.   endfor
    $(class.name)_destroy (&self);
.endfor

    zctx_destroy (&ctx);
    printf ("OK\\n");
    return 0;
}
