################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
# Note: if your project needs a customized configure script (compared to
# the code below 100% generated by zproject), please check first if your
# use-case can be handled by acinclude.m4 support in zproject_autotools.gsl
# (to AC_DEFUN an AX_PROJECT_LOCAL_HOOK, AX_PROJECT_LOCAL_HOOK_CONFIGVARS
# and/or AX_PROJECT_LOCAL_HOOK_FINAL) so you can avoid changing this file
# which would complicate re-generation of your project in the future.

#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
AC_PREREQ(2.61)
#
AC_INIT([zyre],[2.0.1],[zeromq-dev@lists.zeromq.org])

AC_CONFIG_AUX_DIR(config)
AC_CONFIG_MACRO_DIR(config)
AC_CONFIG_HEADERS([src/platform.h])
AM_INIT_AUTOMAKE([subdir-objects tar-ustar dist-zip foreign])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

# This defines PACKAGE_VERSION_... in src/platform.h
PV_MAJOR=`echo $PACKAGE_VERSION | cut -d . -f 1`
PV_MINOR=`echo $PACKAGE_VERSION | cut -d . -f 2`
PV_PATCH=`echo $PACKAGE_VERSION | cut -d . -f 3`
AC_DEFINE_UNQUOTED([PACKAGE_VERSION_MAJOR],[$PV_MAJOR],
    [ZYRE major version])
AC_DEFINE_UNQUOTED([PACKAGE_VERSION_MINOR],[$PV_MINOR],
    [ZYRE minor version])
AC_DEFINE_UNQUOTED([PACKAGE_VERSION_PATCH],[$PV_PATCH],
    [ZYRE patchlevel])
# This lets us use PACKAGE_VERSION in Makefiles
AC_SUBST(PACKAGE_VERSION)

#
# Libtool -version-info (ABI version)
#
# Currently 2:1:0 ("stable"). Don't change this unless you
# know exactly what you're doing and have read and understand
# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html
#
# libzyre -version-info
LTVER="2:1:0"
AC_SUBST(LTVER)

# building in a subdirectory?
AM_CONDITIONAL([USING_VPATH], [test "x${srcdir}" != "x."])

# Capture c flags
ZYRE_ORIG_CFLAGS="${CFLAGS:-none}"

# Checks for programs
AC_PROG_CC
AC_PROG_CC_C99
AM_PROG_CC_C_O
AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL
AC_PROG_SED
AC_PROG_AWK
PKG_PROG_PKG_CONFIG

# Check endianess of the system
AC_C_BIGENDIAN

# Optional project-local hook (acinclude.m4, add AC_DEFUN([AX_PROJECT_LOCAL_HOOK], [whatever]) )
ifdef([AX_PROJECT_LOCAL_HOOK],
    [AX_PROJECT_LOCAL_HOOK])

# See if cppcheck is in PATH; this variable unblocks the "cppcheck" recipe
# (note that "make cppcheck.xml" can be used - and perhaps fail - regardless)
AC_CHECK_PROG([WITH_CPPCHECK], [cppcheck], [true], [false])
AM_CONDITIONAL(WITH_CPPCHECK, $WITH_CPPCHECK)

# Code coverage
AC_MSG_CHECKING([whether to enable GCov])
AC_ARG_WITH(gcov, [AS_HELP_STRING([--with-gcov=yes/no],
                  [With GCC Code Coverage reporting])],
                  [ZYRE_GCOV="$withval"])

if test "x${ZYRE_GCOV}" == "xyes"; then
    CFLAGS="-O0 -g -fprofile-arcs -ftest-coverage"

    if test "x${ZYRE_ORIG_CFLAGS}" != "xnone"; then
        CFLAGS="${CFLAGS} ${ZYRE_ORIG_CFLAGS}"
    fi
    AM_CONDITIONAL(WITH_GCOV, true)
    AC_MSG_RESULT([yes])
else
    AM_CONDITIONAL(WITH_GCOV, false)
    AC_MSG_RESULT([no])
fi

# Memory mis-use detection
AC_MSG_CHECKING([whether to enable ASan])
AC_ARG_ENABLE(address-sanitizer, [AS_HELP_STRING([--enable-address-sanitizer=yes/no],
                  [Build with GCC Address Sanitizer instrumentation])],
                  [ZYRE_ASAN="$enableval"])

if test "x${ZYRE_ASAN}" == "xyes"; then
    CFLAGS="${CFLAGS} -fsanitize=address"
    CXXFLAGS="${CXXFLAGS} -fsanitize=address"

    AM_CONDITIONAL(ENABLE_ASAN, true)
    AC_MSG_RESULT([yes])
else
    AM_CONDITIONAL(ENABLE_ASAN, false)
    AC_MSG_RESULT([no])
fi

# Install Python Bindings
AC_MSG_CHECKING([whether to install Python bindings])

AC_ARG_ENABLE([bindings-python],
    AS_HELP_STRING([--enable-bindings-python=yes/no],
        [Install Python Bindings [default=no]]),
    [ZPROJECT_BINDINGS_PYTHON=$enableval],
    [ZPROJECT_BINDINGS_PYTHON=no])

if test "x$ZPROJECT_BINDINGS_PYTHON" == "xyes"; then
    AM_CONDITIONAL(ENABLE_BINDINGS_PYTHON, true)
    AC_MSG_RESULT([yes])
else
    AM_CONDITIONAL(ENABLE_BINDINGS_PYTHON, false)
    AC_MSG_RESULT([no])
fi

# See if clang-format is in PATH; the result unblocks the relevant recipes
WITH_CLANG_FORMAT=""
AS_IF([test x"$CLANG_FORMAT" = x],
    [AC_PATH_PROG([CLANG_FORMAT], [clang-format], [])],
    [AC_CHECK_PROG([WITH_CLANG_FORMAT], [$CLANG_FORMAT], [true], [fail])])
AS_IF([test x"$CLANG_FORMAT" != x && test x"$WITH_CLANG_FORMAT" = x],
    [AS_IF([test -x "$CLANG_FORMAT"],
        [WITH_CLANG_FORMAT=true],
        [AC_CHECK_PROG([WITH_CLANG_FORMAT], [$CLANG_FORMAT], [true], [false])])])
AS_IF([test "$WITH_CLANG_FORMAT" = fail],
    [AC_MSG_ERROR([Caller explicitly referenced CLANG_FORMAT=$CLANG_FORMAT which was not found])])
AM_CONDITIONAL([WITH_CLANG_FORMAT], [$WITH_CLANG_FORMAT])

# Set pkgconfigdir
AC_ARG_WITH([pkgconfigdir], AS_HELP_STRING([--with-pkgconfigdir=PATH],
    [Path to the pkgconfig directory [[LIBDIR/pkgconfig]]]),
    [pkgconfigdir="$withval"], [pkgconfigdir='${libdir}/pkgconfig'])
AC_SUBST([pkgconfigdir])

# Use the provided pkgconfigdir not only to write our pkg-config data,
# but also as an additional location to look for other packages metadata.
AS_IF([test -n "${pkgconfigdir}" -a -d "${pkgconfigdir}"],
    [AS_IF([test -z "${PKG_CONFIG_PATH}"],
        [PKG_CONFIG_PATH="${pkgconfigdir}"],
        [PKG_CONFIG_PATH="${pkgconfigdir}:${PKG_CONFIG_PATH}"])
     export PKG_CONFIG_PATH
    ])

# Will be used to add flags to pkg-config useful when apps want to statically link
PKGCFG_LIBS_PRIVATE=""
PKGCFG_NAMES_PRIVATE=""

# Archive user supplied flags
PREVIOUS_CFLAGS="${CFLAGS}"
PREVIOUS_LIBS="${LIBS}"


was_libzmq_check_lib_detected=no

search_libzmq="yes"

AC_ARG_WITH([libzmq],
    [
        AS_HELP_STRING([--with-libzmq],
        [yes or no. Optionally specify libzmq prefix (directory where its include/ and lib/ are located), but that is only used if pkgconfig metadata is not found first])
    ],
    [
        search_libzmq="yes"
    ],
    [
        search_libzmq="yes"
    ])
AS_CASE([x"${with_libzmq}"],
    [xyes], [search_libzmq="yes"],
    [xno],  [search_libzmq="no"])

dnl We do not abort right now, because the maintainer/developer may have
dnl something particular in mind, e.g. to build just parts of a project.
AS_IF([test x"${search_libzmq}" = xno],
    [AC_MSG_WARN([Required dependency on libzmq was explicitly disabled during configuration by '--with-libzmq=no'; subsequent full build of zyre may fail])])

AS_IF([test x"${search_libzmq}" = xyes], [
    # Archive previously detected and supplied flags
    PRE_SEARCH_CFLAGS="${CFLAGS}"
    PRE_SEARCH_LIBS="${LIBS}"

    found_pkgconfig=""
    PKG_CHECK_MODULES([libzmq], [libzmq >= 0.0.0],
    [
        was_libzmq_check_lib_detected=pkgcfg
        found_pkgconfig="libzmq"
    ],
    [
        AC_MSG_NOTICE([Package libzmq not found; falling back to defined compilability tests])

        libzmq_synthetic_cflags=""
        libzmq_synthetic_libs="-lzmq"

        if test -n "${with_libzmq}" && test x"${with_libzmq}" != xyes && test x"${with_libzmq}" != xno; then
            if test -r "${with_libzmq}/include/zmq.h"; then
                libzmq_synthetic_cflags="-I${with_libzmq}/include"
                libzmq_synthetic_libs="-L${with_libzmq}/lib -lzmq"
            else
            AC_MSG_ERROR([Header file ${with_libzmq}/include/zmq.h was not found. Please check libzmq prefix])
            fi
        else
            AC_CHECK_HEADER([zmq.h], [],
            AC_MSG_ERROR([Header file zmq.h was not found in default search paths])
                )
        fi

        AC_CHECK_LIB([zmq], [zmq_init],
            [
                was_libzmq_check_lib_detected=yes
                PKGCFG_LIBS_PRIVATE="$PKGCFG_LIBS_PRIVATE -lzmq"
            ],
            [AC_MSG_ERROR([cannot link with -lzmq, install libzmq])])
    ])

dnl END of PKG_CHECK_MODULES and/or direct tests for libzmq
    AS_CASE(["x${was_libzmq_check_lib_detected}"],
        [xpkgcfg], [
                PKGCFG_NAMES_PRIVATE="$PKGCFG_NAMES_PRIVATE ${found_pkgconfig}"
                CFLAGS="${libzmq_CFLAGS} ${CFLAGS}"
                LIBS="${libzmq_LIBS} ${LIBS}"
            ],
        [xyes], [
                CFLAGS="${libzmq_synthetic_cflags} ${CFLAGS}"
                LDFLAGS="${libzmq_synthetic_libs} ${LDFLAGS}"
                LIBS="${libzmq_synthetic_libs} ${LIBS}"

                AC_SUBST([libzmq_CFLAGS],[${libzmq_synthetic_cflags}])
                AC_SUBST([libzmq_LIBS],[${libzmq_synthetic_libs}])
            ],
        [xno], [
            AC_MSG_ERROR([Cannot find pkg-config metadata for libzmq 0.0.0 or higher])
    ])
])
dnl END of enabled attempts to search for libzmq


was_czmq_check_lib_detected=no

search_libczmq="yes"

AC_ARG_WITH([libczmq],
    [
        AS_HELP_STRING([--with-libczmq],
        [yes or no. Optionally specify libczmq prefix (directory where its include/ and lib/ are located), but that is only used if pkgconfig metadata is not found first])
    ],
    [
        search_libczmq="yes"
    ],
    [
        search_libczmq="yes"
    ])
AS_CASE([x"${with_libczmq}"],
    [xyes], [search_libczmq="yes"],
    [xno],  [search_libczmq="no"])

dnl We do not abort right now, because the maintainer/developer may have
dnl something particular in mind, e.g. to build just parts of a project.
AS_IF([test x"${search_libczmq}" = xno],
    [AC_MSG_WARN([Required dependency on czmq was explicitly disabled during configuration by '--with-libczmq=no'; subsequent full build of zyre may fail])])

AS_IF([test x"${search_libczmq}" = xyes], [
    # Archive previously detected and supplied flags
    PRE_SEARCH_CFLAGS="${CFLAGS}"
    PRE_SEARCH_LIBS="${LIBS}"

    found_pkgconfig=""
    PKG_CHECK_MODULES([czmq], [libczmq >= 0.0.0],
    [
        was_czmq_check_lib_detected=pkgcfg
        found_pkgconfig="libczmq"
    ],
    [
        AC_MSG_NOTICE([Package libczmq not found; falling back to defined compilability tests])

        czmq_synthetic_cflags=""
        czmq_synthetic_libs="-lczmq"

        if test -n "${with_libczmq}" && test x"${with_libczmq}" != xyes && test x"${with_libczmq}" != xno; then
            if test -r "${with_libczmq}/include/czmq.h"; then
                czmq_synthetic_cflags="-I${with_libczmq}/include"
                czmq_synthetic_libs="-L${with_libczmq}/lib -lczmq"
            else
            AC_MSG_ERROR([Header file ${with_libczmq}/include/czmq.h was not found. Please check libczmq prefix])
            fi
        else
            AC_CHECK_HEADER([czmq.h], [],
            AC_MSG_ERROR([Header file czmq.h was not found in default search paths])
                )
        fi

        AC_CHECK_LIB([czmq], [zhashx_test],
            [
                was_czmq_check_lib_detected=yes
                PKGCFG_LIBS_PRIVATE="$PKGCFG_LIBS_PRIVATE -lczmq"
            ],
            [AC_MSG_ERROR([cannot link with -lczmq, install libczmq])])
    ])

dnl END of PKG_CHECK_MODULES and/or direct tests for libczmq
    AS_CASE(["x${was_czmq_check_lib_detected}"],
        [xpkgcfg], [
                PKGCFG_NAMES_PRIVATE="$PKGCFG_NAMES_PRIVATE ${found_pkgconfig}"
                CFLAGS="${czmq_CFLAGS} ${CFLAGS}"
                LIBS="${czmq_LIBS} ${LIBS}"
            ],
        [xyes], [
                CFLAGS="${czmq_synthetic_cflags} ${CFLAGS}"
                LDFLAGS="${czmq_synthetic_libs} ${LDFLAGS}"
                LIBS="${czmq_synthetic_libs} ${LIBS}"

                AC_SUBST([czmq_CFLAGS],[${czmq_synthetic_cflags}])
                AC_SUBST([czmq_LIBS],[${czmq_synthetic_libs}])
            ],
        [xno], [
            AC_MSG_ERROR([Cannot find pkg-config metadata for libczmq 0.0.0 or higher])
    ])
])
dnl END of enabled attempts to search for libczmq


CFLAGS="${PREVIOUS_CFLAGS}"
LIBS="${PREVIOUS_LIBS}"

AC_SUBST(pkg_config_libs_private, $PKGCFG_LIBS_PRIVATE)
AC_SUBST(pkg_config_names_private, $PKGCFG_NAMES_PRIVATE)

# Platform specific checks
zyre_on_mingw32="no"
zyre_on_cygwin="no"
zyre_on_android="no"
zyre_on_linux="no"
zyre_on_gnu="no"

# Host specific checks
AC_CANONICAL_HOST

# Man pages are built/installed if asciidoc and xmlto are present
#   --with-docs=no overrides this
AC_ARG_WITH([docs],
    AS_HELP_STRING([--with-docs],
        [Build and install man pages [default=yes]]),
    [with_docs=$withval])

if test "x$with_docs" = "xno"; then
    zyre_build_doc="no"
    zyre_install_man="no"
else
    # Determine whether or not documentation should be built and installed.
    zyre_build_doc="yes"
    zyre_install_man="yes"

    # Check for asciidoc and xmlto and don't build the docs if these are not installed.
    AC_CHECK_PROG(zyre_have_asciidoc, asciidoc, yes, no)
    AC_CHECK_PROG(zyre_have_xmlto, xmlto, yes, no)
    if test "x$zyre_have_asciidoc" = "xno" -o "x$zyre_have_xmlto" = "xno"; then
        if test "x$with_docs" = "xyes" ; then
            AC_MSG_ERROR([Build with docs was explicitly requested, but tools are not available])
        fi
        zyre_build_doc="no"
        # Tarballs built with 'make dist' ship with prebuilt documentation.
        if ! test -f doc/zyre.7; then
            zyre_install_man="no"
            AC_MSG_WARN([You are building an unreleased version of ZYRE and asciidoc or xmlto are not installed.])
            AC_MSG_WARN([Documentation will not be built and manual pages will not be installed.])
        fi
    fi
fi
AC_MSG_CHECKING([whether to build documentation])
AC_MSG_RESULT([$zyre_build_doc])
AC_MSG_CHECKING([whether to install manpages])
AC_MSG_RESULT([$zyre_install_man])

# Set some default features required by libzyre code.
CPPFLAGS="-DZYRE_INTERNAL_BUILD -D_REENTRANT -D_THREAD_SAFE $CPPFLAGS"

# OS-specific tests
case "${host_os}" in
    *linux*)
        # Define on Linux to enable all library features
        CPPFLAGS="-D_GNU_SOURCE -DLINUX $CPPFLAGS"
        AC_DEFINE(ZYRE_HAVE_LINUX, 1, [Have Linux OS])
        zyre_on_linux="yes"

        case "${host_os}" in
            *android*)
                AC_DEFINE(ZYRE_HAVE_ANDROID, 1, [Have Android OS])
                zyre_on_android="yes"
            ;;
        esac
        ;;
    *solaris*)
        # Define on Solaris to enable all library features
        CPPFLAGS="-D_PTHREADS $CPPFLAGS"
        # Allow definitions of common OS-provided functions that are not in old standards
        CPPFLAGS="-D__EXTENSIONS__ $CPPFLAGS"
        AC_DEFINE(ZYRE_HAVE_SOLARIS, 1, [Have Solaris OS])
        CFLAGS="${CFLAGS} -lsocket -lssp"
        ;;
    *freebsd*)
        # Define on FreeBSD to enable all library features
        CPPFLAGS="-D__BSD_VISIBLE $CPPFLAGS"
        AC_DEFINE(ZYRE_HAVE_FREEBSD, 1, [Have FreeBSD OS])
        ;;
    *darwin*)
        # Define on Darwin to enable all library features
        CPPFLAGS="-D_DARWIN_C_SOURCE $CPPFLAGS"
        AC_DEFINE(ZYRE_HAVE_OSX, 1, [Have DarwinOSX OS])
        ;;
    *netbsd*)
        # Define on NetBSD to enable all library features
        CPPFLAGS="-D_NETBSD_SOURCE $CPPFLAGS"
        AC_DEFINE(ZYRE_HAVE_NETBSD, 1, [Have NetBSD OS])
        ;;
    *openbsd*)
        # Define on OpenBSD to enable all library features
        CPPFLAGS="-D_BSD_SOURCE $CPPFLAGS"
        AC_DEFINE(ZYRE_HAVE_OPENBSD, 1, [Have OpenBSD OS])
        ;;
    *nto-qnx*)
        AC_DEFINE(ZYRE_HAVE_QNXNTO, 1, [Have QNX Neutrino OS])
        ;;
    *aix*)
        AC_DEFINE(ZYRE_HAVE_AIX, 1, [Have AIX OS])
        ;;
    *hpux*)
        # Define on HP-UX to enable all library features
        CPPFLAGS="-D_POSIX_C_SOURCE=200112L"
        AC_DEFINE(ZYRE_HAVE_HPUX, 1, [Have HPUX OS])
        ;;
    *mingw32*)
        # Disable format error due to incomplete ANSI C
        CFLAGS="-Wno-error=format -Wno-unused-function -Wno-unused-variable -D_XOPEN_SOURCE $CFLAGS"
        CPPFLAGS="-Wno-error=format -Wno-unused-function -Wno-unused-variable -D_XOPEN_SOURCE $CPPFLAGS"
        AC_DEFINE(ZYRE_HAVE_WINDOWS, 1, [Have Windows OS])
        AC_DEFINE(ZYRE_HAVE_MINGW32, 1, [Have MinGW32])
        AC_CHECK_HEADERS(windows.h)
        zyre_on_mingw32="yes"
        zyre_install_man="no"
        ;;
    *mingw64*)
        # Define on MINGW64 to enable all libeary features
        # Disable format error due to incomplete ANSI C
        CFLAGS="-Wno-error=format -Wno-unused-function -Wno-unused-variable -D_XOPEN_SOURCE $CFLAGS"
        CPPFLAGS="-Wno-error=format -Wno-unused-function -Wno-unused-variable -D_XOPEN_SOURCE $CPPFLAGS"
        AC_DEFINE(ZYRE_HAVE_WINDOWS, 1, [Have Windows OS])
        AC_DEFINE(ZYRE_HAVE_MINGW32, 1, [Have MinGW32])
        AC_CHECK_HEADERS(windows.h)
        zyre_on_mingw32="yes"
        zyre_install_man="no"
        ;;
    *cygwin*)
        # Define on Cygwin to enable all library features
        CPPFLAGS="-D_GNU_SOURCE $CPPFLAGS"
        AC_DEFINE(ZYRE_HAVE_CYGWIN, 1, [Have Cygwin])
        zyre_on_cygwin="yes"
        ;;
    gnu*)
        # Define on GNU/Hurd to enable all library features
        if test "x$GXX" = "xyes"; then
            CPPFLAGS="-D_GNU_SOURCE $CPPFLAGS"
        fi
        AC_DEFINE(ZYRE_HAVE_GNU, 1, [Have GNU/Hurd OS])
        zyre_on_gnu="yes"
        ;;
    *)
        AC_MSG_ERROR([unsupported system: ${host_os}])
        ;;
esac

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(errno.h arpa/inet.h netinet/tcp.h netinet/in.h stddef.h \
                 stdlib.h string.h sys/socket.h sys/time.h unistd.h \
                 limits.h ifaddrs.h)
AC_CHECK_HEADERS([net/if.h net/if_media.h linux/wireless.h], [], [],
[
#ifdef HAVE_SYS_SOCKET_H
# include <sys/socket.h>
#endif
#include <stdint.h>
])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_HEADER_TIME
AC_TYPE_UINT32_T
AC_C_VOLATILE
AC_C_BIGENDIAN

AM_CONDITIONAL(ENABLE_SHARED, test "x$enable_shared" = "xyes")
AM_CONDITIONAL(ON_MINGW, test "x$zyre_on_mingw32" = "xyes")
AM_CONDITIONAL(ON_CYGWIN, test "x$zyre_on_cygwin" = "xyes")
AM_CONDITIONAL(ON_ANDROID, test "x$zyre_on_android" = "xyes")
AM_CONDITIONAL(ON_LINUX, test "x$zyre_on_linux" = "xyes")
AM_CONDITIONAL(ON_GNU, test "x$zyre_on_gnu" = "xyes")
AM_CONDITIONAL(INSTALL_MAN, test "x$zyre_install_man" = "xyes")
AM_CONDITIONAL(BUILD_DOC, test "x$zyre_build_doc" = "xyes")

AC_ARG_ENABLE([dist_cmakefiles],
    AS_HELP_STRING([--enable-dist_cmakefiles],
        [Distribute CMakeLists.txt and related files [default depends: on if present and not cross compiling]]),
    [enable_dist_cmakefiles=$enableval],
    [AC_MSG_CHECKING([for presence of CMake recipes])
if test "x$cross_compiling" = "xyes"; then
     enable_dist_cmakefiles=no
else
     AC_CHECK_FILE($srcdir/CMakeLists.txt, [enable_dist_cmakefiles=yes], [enable_dist_cmakefiles=no])
fi
     AC_MSG_RESULT([$enable_dist_cmakefiles])])
AM_CONDITIONAL(ENABLE_DIST_CMAKEFILES, test "x$enable_dist_cmakefiles" = "xyes")

# Check for perf_local intent
AC_ARG_ENABLE([perf_local],
    AS_HELP_STRING([--enable-perf_local],
        [Compile 'perf_local' in src [default=yes]]),
    [enable_perf_local=$enableval],
    [enable_perf_local=yes])

AM_CONDITIONAL([ENABLE_PERF_LOCAL], [test x$enable_perf_local != xno])
AM_COND_IF([ENABLE_PERF_LOCAL], [AC_MSG_NOTICE([ENABLE_PERF_LOCAL defined])])

# Check for perf_remote intent
AC_ARG_ENABLE([perf_remote],
    AS_HELP_STRING([--enable-perf_remote],
        [Compile 'perf_remote' in src [default=yes]]),
    [enable_perf_remote=$enableval],
    [enable_perf_remote=yes])

AM_CONDITIONAL([ENABLE_PERF_REMOTE], [test x$enable_perf_remote != xno])
AM_COND_IF([ENABLE_PERF_REMOTE], [AC_MSG_NOTICE([ENABLE_PERF_REMOTE defined])])

# Check for zpinger intent
AC_ARG_ENABLE([zpinger],
    AS_HELP_STRING([--enable-zpinger],
        [Compile and install 'zpinger' [default=yes]]),
    [enable_zpinger=$enableval],
    [enable_zpinger=yes])

AM_CONDITIONAL([ENABLE_ZPINGER], [test x$enable_zpinger != xno])
AM_COND_IF([ENABLE_ZPINGER], [AC_MSG_NOTICE([ENABLE_ZPINGER defined])])

# Check for ztester_beacon intent
AC_ARG_ENABLE([ztester_beacon],
    AS_HELP_STRING([--enable-ztester_beacon],
        [Compile 'ztester_beacon' in src [default=yes]]),
    [enable_ztester_beacon=$enableval],
    [enable_ztester_beacon=yes])

AM_CONDITIONAL([ENABLE_ZTESTER_BEACON], [test x$enable_ztester_beacon != xno])
AM_COND_IF([ENABLE_ZTESTER_BEACON], [AC_MSG_NOTICE([ENABLE_ZTESTER_BEACON defined])])

# Check for ztester_gossip intent
AC_ARG_ENABLE([ztester_gossip],
    AS_HELP_STRING([--enable-ztester_gossip],
        [Compile 'ztester_gossip' in src [default=yes]]),
    [enable_ztester_gossip=$enableval],
    [enable_ztester_gossip=yes])

AM_CONDITIONAL([ENABLE_ZTESTER_GOSSIP], [test x$enable_ztester_gossip != xno])
AM_COND_IF([ENABLE_ZTESTER_GOSSIP], [AC_MSG_NOTICE([ENABLE_ZTESTER_GOSSIP defined])])

# Check for zyre_selftest intent
AC_ARG_ENABLE([zyre_selftest],
    AS_HELP_STRING([--enable-zyre_selftest],
        [Compile 'zyre_selftest' in src [default=yes]]),
    [enable_zyre_selftest=$enableval],
    [enable_zyre_selftest=yes])

AM_CONDITIONAL([ENABLE_ZYRE_SELFTEST], [test x$enable_zyre_selftest != xno])
AM_COND_IF([ENABLE_ZYRE_SELFTEST], [AC_MSG_NOTICE([ENABLE_ZYRE_SELFTEST defined])])

# Checks for library functions.
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(perror gettimeofday memset getifaddrs)


# enable specific system integration features
if test "x$cross_compiling" = "xyes"; then
    #   Enable draft by default when cross-compiling
    defaultval=yes
else
    # enable draft API by default if we're in a git repository
    # else disable it by default; then allow --enable-drafts=yes/no override
    AC_CHECK_FILE($srcdir/.git, [defaultval=yes],
        [AC_MSG_CHECKING([running under a git repository workspace])
         AS_IF([git rev-parse --show-toplevel 2>/dev/null],
            [defaultval=yes],
            [defaultval=no])
         AC_MSG_RESULT($defaultval)
        ])
fi

AC_ARG_ENABLE([drafts],
    AS_HELP_STRING([--enable-drafts],
        [Build and install draft classes and methods [default=yes]]),
    [enable_drafts=$enableval],
    [enable_drafts=$defaultval])

AM_CONDITIONAL([ENABLE_DRAFTS], [test x$enable_drafts != xno])

if test "x$enable_drafts" = "xyes"; then
    AC_MSG_NOTICE([Building stable and legacy API + draft API])
    AC_DEFINE(ZYRE_BUILD_DRAFT_API, 1, [Provide draft classes and methods])
    AC_SUBST(pkg_config_defines, "-DZYRE_BUILD_DRAFT_API=1")
else
    AC_MSG_NOTICE([Building stable and legacy API (no draft API)])
    AC_SUBST(pkg_config_defines, "")
fi

AC_ARG_ENABLE([Werror],
    AS_HELP_STRING([--enable-Werror],
        [Add -Wall -Werror to GCC/GXX arguments [default=no; default=auto if nothing specified as the specific argument value]]),
    [AS_IF([test -n "$enableval"], [enable_Werror=$enableval], [enable_Werror=auto])],
    [enable_Werror=no])

# These options are GNU compiler specific.
AS_IF([test "x$enable_Werror" = "xyes" || test "x$enable_Werror" = "xauto"],
    [AS_IF([test -n "$CC"],[AS_IF([$CC --version 2>&1 | grep 'Free Software Foundation' > /dev/null && test "x$GCC" = "xyes"],
        [AC_MSG_NOTICE([Enabling pedantic errors for GNU C])
         CFLAGS="$CFLAGS -pedantic -Wall -Werror -Werror=format-security"],
        [AS_IF([$CC --version 2>&1 | grep 'clang version' > /dev/null],
            [AC_MSG_NOTICE([Enabling pedantic errors for clang C])
             CFLAGS="$CFLAGS -pedantic -Wall -Werror -Werror=format-security"],
            [AC_MSG_NOTICE([Not enabling pedantic errors: compiler not supported by this recipe (not GNU or clang C)])
             AS_IF([test "x$enable_Werror" = "xyes"], [AC_MSG_ERROR([--enable-Werror=yes was requested and can not be satisfied for C: $CC])])
        ])])])
     AS_IF([test -n "$CXX"],[AS_IF([$CXX --version 2>&1 | grep 'Free Software Foundation' > /dev/null && test "x$GCC" = "xyes"],
        [AC_MSG_NOTICE([Enabling pedantic errors for GNU C++])
         CXXFLAGS="$CXXFLAGS -pedantic -Wall -Werror -Werror=format-security"],
        [AS_IF([$CXX --version 2>&1 | grep 'clang version' > /dev/null],
            [AC_MSG_NOTICE([Enabling pedantic errors for clang C++])
             CXXFLAGS="$CXXFLAGS -pedantic -Wall -Werror -Werror=format-security"],
            [AC_MSG_NOTICE([Not enabling pedantic errors: compiler not supported by this recipe (not GNU or clang C++)])
             AS_IF([test "x$enable_Werror" = "xyes"], [AC_MSG_ERROR([--enable-Werror=yes was requested and can not be satisfied for C++: $CXX])])
        ])])])
     AS_IF([test -n "$CPP"],[AS_IF([$CPP --version 2>&1 | grep 'Free Software Foundation' > /dev/null && test "x$GCC" = "xyes"],
        [AC_MSG_NOTICE([Enabling pedantic errors for GNU CPP preprocessor])
         CPPFLAGS="$CPPFLAGS -pedantic -Werror -Wall -Wc++-compat"
        ],
        [AS_IF([$CXX --version 2>&1 | grep 'clang version' > /dev/null],
            [AC_MSG_NOTICE([Enabling pedantic errors for clang CPP preprocessor])
             CPPFLAGS="$CPPFLAGS -pedantic -Werror -Wall -Wc++-compat"
            ],
            [AC_MSG_NOTICE([Not enabling pedantic errors: preprocessor not supported by this recipe (not GNU or clang CPP)])
             AS_IF([test "x$enable_Werror" = "xyes"], [AC_MSG_ERROR([--enable-Werror=yes was requested and can not be satisfied for CPP: $CPP])])
        ])])])
])

# Optional project-local hook to (re-)define some variables that can be used
# in your project files generated from .in templates - in your acinclude.m4,
# add AC_DEFUN([AX_PROJECT_LOCAL_HOOK_CONFIGVARS], [whatever])
ifdef([AX_PROJECT_LOCAL_HOOK_CONFIGVARS],
    [AX_PROJECT_LOCAL_HOOK_CONFIGVARS])

# Specify output files
AC_CONFIG_FILES([Makefile
                 doc/Makefile
                 include/Makefile
                 src/libzyre.pc
                ])


# Optional project-local hook to put some finishing touches in your configure
# script, override something compared to zproject-generated code, etc. - in
# your acinclude.m4, add AC_DEFUN([AX_PROJECT_LOCAL_HOOK_FINAL], [whatever])
ifdef([AX_PROJECT_LOCAL_HOOK_FINAL],
    [AX_PROJECT_LOCAL_HOOK_FINAL])

AC_OUTPUT

# Print configure summary and list make options
AC_DEFUN([AX_SUMMARIZE_ENV],
[
BUILD_USER=${USER}
BUILD_ARCH=${host}
BUILD_HOST=${ac_hostname}
BUILD_DATE=$(date +'%F %H:%M')

AC_DEFINE_UNQUOTED([BUILD_USER],     "${BUILD_USER}",     [The fine user who built the package])
AC_DEFINE_UNQUOTED([BUILD_ARCH],     "${BUILD_ARCH}",     [Architecture of the build host])
AC_DEFINE_UNQUOTED([BUILD_HOST],     "${BUILD_HOST}",     [Build host name])
AC_DEFINE_UNQUOTED([BUILD_DATE],     "${BUILD_DATE}",     [Build date])

AC_SUBST(BUILD_USER)
AC_SUBST(BUILD_ARCH)
AC_SUBST(BUILD_HOST)
AC_SUBST(BUILD_DATE)
AC_SUBST(BUILD_VERSION)
])

AC_DEFUN([AX_SUMMARIZE_CONFIG],
[
echo
echo '##########################################################################'
echo '#                                SUMMARY                                 #'
echo '##########################################################################'
echo
echo Package version............... : $PACKAGE-$VERSION
echo
echo C compiler.................... : $CC
echo C compiler flags.............. : $CFLAGS
echo C++ compiler.................. : $CXX
echo C++ compiler flags............ : $CXXFLAGS
echo Configure date................ : $BUILD_DATE
echo Build architecture............ : $BUILD_ARCH
echo Build docs.................... : $zyre_build_doc
echo Build host.................... : $BUILD_HOST
echo Build user.................... : $USER
echo Draft API..................... : $enable_drafts
echo Python Bindings............... : $ZPROJECT_BINDINGS_PYTHON
echo Install dir................... : $prefix
echo Install man pages............. : $zyre_install_man

echo
echo Help:
echo Use the Draft API \(default = yes\):
echo --enable-drafts=\(yes\|no\)
echo
echo Build the docs and install the man pages \(default = yes\):
echo --with-docs=\(yes\|no\)       *requires asciidoc and xmlto

echo
echo '##########################################################################'

echo
echo Configure complete! Now proceed with:
echo "    - 'make'               compile the project"
echo "    - 'make check'         run the project's selftest"
echo "    - 'make check-<test-name>'    run the project's selftest"
echo "    - 'make install'       install the project to $prefix"
echo "    - 'make bindings       install enabled language bindings (Python, etc)"
echo
echo Further options are:
echo "    - 'make callcheck'     run the project's selftest with valgrind to"
echo "                           check for performance leaks"
echo "    - 'make check-verbose' run the project's selftest in verbose mode"
echo "    - 'make code'          generate code from models in src directory"
echo "                           (requires zproject and zproto)"
echo "    - 'make debug'         run the project's selftest under gdb"
echo "    - 'make memcheck'      run the project's selftest with valgrind to"
echo "                           check for memory leaks"
echo "    - 'make coverage'      generate project's selftest coverage report"
echo "                           expects --with-gcov option for configure"
echo "    - 'make clang-format-check'   check if project sources conform"
echo "                           to style requirements"
echo "    - 'make clang-format'  modify project sources to conform"
echo "                           to style requirements"
echo "    - 'make clang-format-diff'    modify as above and print 'git diff'"
echo
])

AX_SUMMARIZE_ENV
AX_SUMMARIZE_CONFIG
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
