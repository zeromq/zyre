/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/

ext.jni_dependencies_version = project.hasProperty('isRelease') ? 'latest.release' : 'latest.integration'
ext.hasNotEmptyProperty = { propertyName ->
    return project.hasProperty(propertyName) ? project[propertyName]?.trim() : false
}

dependencies {
    implementation "org.zeromq.czmq:czmq-jni:$jni_dependencies_version"
    implementation 'org.scijava:native-lib-loader:2.4.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
}

//  ------------------------------------------------------------------
//  Build section

task generateJniHeaders(type: Exec, dependsOn: 'classes') {
    def classpath = sourceSets.main.output.classesDirs
    def appclasspath = configurations.runtimeClasspath.files*.getAbsolutePath().join(File.pathSeparator)
    def nativeIncludes = 'src/native/include'
    def jniClasses = [
            'src/main/java/org/zeromq/zyre/Zyre.java',
            'src/main/java/org/zeromq/zyre/ZyreEvent.java'
    ]
    def utilityClasses = [
            'src/main/java/org/zeromq/tools/ZmqNativeLoader.java'
    ]
    commandLine("javac", "-h", "$nativeIncludes", "-classpath", "$classpath${File.pathSeparator}$appclasspath", *jniClasses, *utilityClasses)
}

tasks.withType(Test) {
    def defaultJavaLibraryPath = System.getProperty("java.library.path")
    if (osdetector.os == 'windows') {
         def extraJavaLibraryPath = hasNotEmptyProperty('buildPrefix') ? "$project.buildPrefix\\bin;$project.buildPrefix\\lib" : ''
         extraJavaLibraryPath = extraJavaLibraryPath.replace("/", "\\")
         systemProperty "java.library.path", "${projectDir}\\build\\Release${File.pathSeparator}" +
                                             "${extraJavaLibraryPath}${File.pathSeparator}" +
                                             "${defaultJavaLibraryPath}"
    } else {
        def extraJavaLibraryPath = hasNotEmptyProperty('buildPrefix') ? "$project.buildPrefix/lib" : ''
        systemProperty "java.library.path", "${projectDir}/build${File.pathSeparator}" +
                                            "/usr/local/lib${File.pathSeparator}" +
                                            "/tmp/lib${File.pathSeparator}" +
                                            "${extraJavaLibraryPath}${File.pathSeparator}" +
                                            "${defaultJavaLibraryPath}"
    }
}

task initCMake(type: Exec, dependsOn: 'generateJniHeaders') {
    workingDir  'build'
    def prefixPath = hasNotEmptyProperty('buildPrefix') ? "-DCMAKE_PREFIX_PATH=$project.buildPrefix" : ''
    commandLine 'cmake', "$prefixPath", '..'
}

task buildNative(type: Exec, dependsOn: 'initCMake') {
    if (osdetector.os == 'windows') {
        commandLine 'cmake',
                    '--build',  'build',
                    '--config', 'Release',
                    '--target', 'zyrejni',
                    '--', '-verbosity:Minimal',  '-maxcpucount'
    } else {
        commandLine 'cmake',
                    '--build',  'build'
    }
}

jar.dependsOn buildNative
test.dependsOn buildNative

//  ------------------------------------------------------------------
//  Install and Publish section

task sourcesJar(type: Jar, dependsOn: 'classes') {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifactId = 'zyre-jni'
            pom {
                name = 'zyre-jni'
                description = 'an open-source framework for proximity-based P2P apps'
                packaging = 'jar'
                url = 'https://github.com/zeromq/zyre'
                licenses {
                    license {
                        name = 'Mozilla Public License Version 2.0'
                        url = 'https://www.mozilla.org/en-US/MPL/2.0/'
                    }
                }
                scm {
                    connection = 'https://github.com/zeromq/zyre.git'
                    developerConnection = 'https://github.com/zeromq/zyre.git'
                    url = 'https://github.com/zeromq/zyre'
                }
            }
        }
    }
}

artifactoryPublish {
    publications ('mavenJava')
}


bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['mavenJava']
    publish = true
    override = true
    pkg {
        repo = 'maven'
        name = 'zyre-jni'
        desc = 'an open-source framework for proximity-based P2P apps'
        userOrg = System.getenv('BINTRAY_USER_ORG')
        licenses = ['MPL-2.0']
        websiteUrl = 'https://github.com/zeromq/zyre'
        issueTrackerUrl = 'https://github.com/zeromq/zyre/issues'
        vcsUrl = 'https://github.com/zeromq/zyre.git'
        githubRepo = System.getenv('BINTRAY_USER_ORG') + '/zyre'
        version {
            name = project.version
            vcsTag= project.version
        }
    }
}

//  ------------------------------------------------------------------
//  Cleanup section

clean.doFirst {
    delete 'CMakeFiles', 'msvc'
    delete fileTree(projectDir) {
        include '*.so'
        include '*.dylib'
        include 'cmake_install.cmake'
        include 'Makefile'
        include 'CMakeCache.txt'
    }
}
